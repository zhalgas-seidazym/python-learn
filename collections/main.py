from collections import Counter, defaultdict, OrderedDict, deque, namedtuple, ChainMap

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
data = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']
counter = Counter(data)
print(counter)  # Counter({'apple': 3, 'banana': 2, 'orange': 1})

# üîπ –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–∞
print(counter['apple'])  # 3

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
print(counter.most_common(2))  # [('apple', 3), ('banana', 2)]

# üîπ –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
print(list(counter.elements()))  # ['apple', 'apple', 'apple', 'banana', 'banana', 'orange']

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
counter.update(['apple', 'banana', 'grape'])
print(counter)  # Counter({'apple': 4, 'banana': 3, 'orange': 1, 'grape': 1})

# üîπ –í—ã—á–∏—Ç–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
counter.subtract(['apple', 'banana', 'banana'])
print(counter)  # Counter({'apple': 3, 'banana': 1, 'orange': 1, 'grape': 1})

# -------------------------------------------------------------------------------

# üîπ –ü—Ä–∏–º–µ—Ä —Å list
my_dict = defaultdict(list)
my_dict['a'].append(1)
print(my_dict)  # {'a': [1]}

# üîπ –ü—Ä–∏–º–µ—Ä —Å int
counter_dict = defaultdict(int)
counter_dict['a'] += 1
print(counter_dict)  # {'a': 1}

# üîπ –ü—Ä–∏–º–µ—Ä —Å set
set_dict = defaultdict(set)
set_dict['b'].add(5)
print(set_dict)  # {'b': {5}}

# -------------------------------------------------------------------------------

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
ordered_dict = OrderedDict()
ordered_dict['a'] = 1
ordered_dict['b'] = 2
ordered_dict['c'] = 3

print(ordered_dict)  # OrderedDict([('a', 1), ('b', 2), ('c', 3)])

# üîπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü
ordered_dict.move_to_end('a')
print(ordered_dict)  # OrderedDict([('b', 2), ('c', 3), ('a', 1)])

# üîπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
ordered_dict.move_to_end('c', last=False)
print(ordered_dict)  # OrderedDict([('c', 3), ('b', 2), ('a', 1)])

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
ordered_dict.popitem()
print(ordered_dict)  # OrderedDict([('c', 3), ('b', 2)])

# --------------------------------------------------------------------------------------

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –æ—á–µ—Ä–µ–¥–∏
dq = deque([1, 2, 3])
print(dq)  # deque([1, 2, 3])

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
dq.append(4)  # –í –∫–æ–Ω–µ—Ü
dq.appendleft(0)  # –í –Ω–∞—á–∞–ª–æ
print(dq)  # deque([0, 1, 2, 3, 4])

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
dq.pop()  # –£–¥–∞–ª—è–µ—Ç —Å –∫–æ–Ω—Ü–∞
dq.popleft()  # –£–¥–∞–ª—è–µ—Ç —Å –Ω–∞—á–∞–ª–∞
print(dq)  # deque([1, 2, 3])

# üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
dq = deque([1, 2, 3, 4], maxlen=3)
print(dq)  # deque([2, 3, 4], maxlen=3)

# üîπ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥
dq.rotate(1)  # –°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ
print(dq)  # deque([4, 2, 3], maxlen=3)

# ---------------------------------------------------------------------------------------

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
Person = namedtuple('Person', ['name', 'age', 'city'])
p = Person(name='Alice', age=30, city='New York')

print(p.name)  # Alice
print(p.age)  # 30
print(p.city)  # New York

# üîπ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
print(p._asdict())  # {'name': 'Alice', 'age': 30, 'city': 'New York'}

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞/—Å–ª–æ–≤
data = ['Bob', 25, 'Los Angeles']
p2 = Person._make(data)
print(p2)  # Person(name='Bob', age=25, city='Los Angeles')

# üîπ –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
p3 = p._replace(age=35)
print(p3)  # Person(name='Alice', age=35, city='New York')

# -----------------------------------------------------------------------

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

# üîπ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
chain = ChainMap(dict1, dict2)
print(chain['a'])  # 1 (–∏–∑ dict1)
print(chain['b'])  # 2 (–∏–∑ dict1, —Ç.–∫. –æ–Ω –ø–µ—Ä–≤—ã–π –≤ —Ü–µ–ø–æ—á–∫–µ)
print(chain['c'])  # 4 (–∏–∑ dict2)

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
new_dict = {'d': 5}
chain = chain.new_child(new_dict)
print(chain['d'])  # 5 (–∏–∑ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)
